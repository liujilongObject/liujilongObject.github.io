import{_ as a,c as e,o as r,a2 as t}from"./chunks/framework.Bk-UhgEh.js";const b=JSON.parse('{"title":"浏览器访问一个URL的详细过程","description":"","frontmatter":{},"headers":[],"relativePath":"Network/search-url.md","filePath":"Network/search-url.md","lastUpdated":1714236277000}'),o={name:"Network/search-url.md"},l=t('<h1 id="浏览器访问一个url的详细过程" tabindex="-1">浏览器访问一个URL的详细过程 <a class="header-anchor" href="#浏览器访问一个url的详细过程" aria-label="Permalink to &quot;浏览器访问一个URL的详细过程&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当浏览器访问一个URL时，会触发一系列复杂的流程来加载和展示网页。这个过程涉及网络通信、数据传输、资源处理和界面渲染等多个方面，每一环节都可能影响到网页的加载速度和用户体验。</p></div><h3 id="_1-url输入" tabindex="-1">1. URL输入： <a class="header-anchor" href="#_1-url输入" aria-label="Permalink to &quot;1. URL输入：&quot;">​</a></h3><p>用户在浏览器的地址栏中输入URL，例如 <code>https://www.example.com</code>。</p><h3 id="_2-dns解析" tabindex="-1">2. DNS解析： <a class="header-anchor" href="#_2-dns解析" aria-label="Permalink to &quot;2. DNS解析：&quot;">​</a></h3><p>浏览器首先需要将域名 www.example.com 解析为对应的IP地址。这个过程称为DNS解析，浏览器会查找DNS缓存，如果没有记录，则会请求<a href="https://aws.amazon.com/cn/route53/what-is-dns/" target="_blank" rel="noreferrer">DNS服务器</a>获取IP地址。</p><h3 id="_3-tcp连接建立" tabindex="-1">3. TCP连接建立： <a class="header-anchor" href="#_3-tcp连接建立" aria-label="Permalink to &quot;3. TCP连接建立：&quot;">​</a></h3><p>一旦得到IP地址，浏览器会与服务器建立一个<a href="https://zhuanlan.zhihu.com/p/24860403" target="_blank" rel="noreferrer">TCP连接</a>。对于HTTPS，这个连接还需要经过<a href="https://www.cloudflare.com/zh-tw/learning/ssl/what-happens-in-a-tls-handshake/" target="_blank" rel="noreferrer">TLS/SSL握手</a>，以确保通信是加密的。</p><h3 id="_4-http请求" tabindex="-1">4. HTTP请求： <a class="header-anchor" href="#_4-http请求" aria-label="Permalink to &quot;4. HTTP请求：&quot;">​</a></h3><p>TCP连接建立后，浏览器会发送一个HTTP请求到服务器。如果使用的是HTTPS，则请求会通过SSL/TLS协议发送。请求通常包括请求行（例如，GET / HTTP/1.1）、头部信息和空行。</p><h3 id="_5-服务器处理" tabindex="-1">5. 服务器处理： <a class="header-anchor" href="#_5-服务器处理" aria-label="Permalink to &quot;5. 服务器处理：&quot;">​</a></h3><p>服务器接收到请求后，会处理请求并准备响应。这可能涉及到读取和处理数据，以及生成HTML、CSS、JavaScript等资源。</p><h3 id="_6-http响应" tabindex="-1">6. HTTP响应： <a class="header-anchor" href="#_6-http响应" aria-label="Permalink to &quot;6. HTTP响应：&quot;">​</a></h3><p>服务器将准备好的响应通过TCP连接发送回浏览器。响应也包括响应状态码（例如<code>200 OK</code>）、头部信息和响应正文。</p><h3 id="_7-数据传输" tabindex="-1">7. 数据传输： <a class="header-anchor" href="#_7-数据传输" aria-label="Permalink to &quot;7. 数据传输：&quot;">​</a></h3><p>如果响应正文包含的是静态资源（如图片、CSS文件、JavaScript文件等），这些资源会被浏览器直接接收。如果是动态内容，如从数据库检索的数据，浏览器还需要解析这些数据。</p><h3 id="_8-渲染流程" tabindex="-1">8. 渲染流程： <a class="header-anchor" href="#_8-渲染流程" aria-label="Permalink to &quot;8. 渲染流程：&quot;">​</a></h3><p>一旦所有数据都接收完毕，浏览器开始渲染页面。首先解析HTML，构建DOM树，然后根据CSSOM（CSS对象模型）对DOM进行布局，最后进行绘制。</p><h3 id="_9-javascript执行" tabindex="-1">9. JavaScript执行： <a class="header-anchor" href="#_9-javascript执行" aria-label="Permalink to &quot;9. JavaScript执行：&quot;">​</a></h3><p>如果页面中包含JavaScript代码，浏览器会在适当的时候执行这些代码。JavaScript代码可能会修改DOM，或者异步请求额外的数据。</p><h3 id="_10-事件监听和交互" tabindex="-1">10. 事件监听和交互： <a class="header-anchor" href="#_10-事件监听和交互" aria-label="Permalink to &quot;10. 事件监听和交互：&quot;">​</a></h3><p>浏览器会监听用户的交互事件，如点击、滚动等，并根据事件做出响应，可能触发JavaScript回调函数。</p><h3 id="_11-资源缓存" tabindex="-1">11. 资源缓存： <a class="header-anchor" href="#_11-资源缓存" aria-label="Permalink to &quot;11. 资源缓存：&quot;">​</a></h3><p>浏览器会将请求的资源存储在缓存中，以便下次访问相同资源时可以直接从缓存中读取，减少请求次数。</p><h3 id="_12-连接关闭" tabindex="-1">12. 连接关闭： <a class="header-anchor" href="#_12-连接关闭" aria-label="Permalink to &quot;12. 连接关闭：&quot;">​</a></h3><p>当所有数据都接收完毕并且页面渲染完成，浏览器会关闭与服务器的TCP连接。如果需要继续通信，例如为了异步请求更多的数据，则这个连接可能会保持打开状态。</p><h3 id="其他资料" tabindex="-1">其他资料 <a class="header-anchor" href="#其他资料" aria-label="Permalink to &quot;其他资料&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noreferrer">浏览器工作原理</a></li><li><a href="https://web.dev/articles/howbrowserswork?hl=zh-cn#Introduction" target="_blank" rel="noreferrer">浏览器的工作方式</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance" target="_blank" rel="noreferrer">web性能</a></li></ul>',28),h=[l];function i(n,c,s,d,p,_){return r(),e("div",null,h)}const P=a(o,[["render",i]]);export{b as __pageData,P as default};
